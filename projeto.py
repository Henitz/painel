# import plotly.express as px
import textwrap
import warnings
import os
import sys

zip_file_path = "app.zip"

# !pip install matplotlib
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
# import seaborn as sns
# !pip install statsmodels
# from statsmodels.tsa.seasonal import seasonal_decompose
# from statsmodels.tsa.stattools import acf, pacf
import streamlit as st
from prophet.diagnostics import performance_metrics

import model
import prevel_model

# Ignorar os FutureWarnings
warnings.simplefilter(action='ignore', category=FutureWarning)

# selected_date = '2024-01-25'  # Replace this with the selected date
# selected_time = pd.Timestamp('00:00:00').time()

# from model import modelo
# from prevel_model import prevendo

import pandas as pd
import numpy as np
from prophet import Prophet
import plotly.graph_objs as go
import plotly.express as px
import streamlit as st
import painel34

# Cria√ß√£o de um componente HTML personalizado para dividir a tela

# Criando dois pain√©is na mesma linha
col1, col2 = st.columns([2, 1])

with col1:
    st.write("# Painel 1")
    # Adicione o conte√∫do do Painel 1 aqui

    st.title('üìà Proje√ß√£o do √çndice Bovespa')

    # Importando bibliotecas
    import streamlit as st

    # Estilo para ajustar a largura da √°rea de exibi√ß√£o e justificar o texto
    st.markdown(
        """
        <style>
            .reportview-container .main .block-container {
                max-width: 50%;
                justify-content: center;
            }
    
            .custom-container {
                width: 80%;
                padding: 20px;
                border: 2px solid #333;
                border-radius: 10px;
                margin: 10px 0;
            }
            .custom-container li {
                text-align: justify; /* Alinha o texto √† justifica√ß√£o */  
            }
            .custom-container p {
                text-align: justify; /* Alinha o texto √† justifica√ß√£o */  
            }
            
        </style>
        """,
        unsafe_allow_html=True
    )

    # Definindo guias
    tabs = ["Vis√£o Geral", "Pontos-chave", "Utiliza√ß√£o do Prophet", "Sobre o Autor"]
    selected_tab = st.sidebar.radio("Escolha uma guia:", tabs, key="unique_key_for_tabs_radio")

    # Conte√∫do das guias
    tab_contents = {
        "Vis√£o Geral": """
        <div class="custom-container">
           <p> Este data app usa a Biblioteca open-source Prophet para automaticamente gerar valores futuros de previs√£o de um dataset importado. 
            Voc√™ poder√° visualizar as proje√ß√µes do √≠ndice Bovespa para o per√≠odo de 01/01/2024 a 31/01/2024 üòµ.</p>
        </div>
        <style>
            .custom-container p {
                text-align: justify; /* Alinha o texto √† justifica√ß√£o */ 
            }
        </style>
        """,
        "Pontos-chave": """
        <div class="custom-container">
          <p>O Prophet tem sido amplamente utilizado em diversas √°reas, como previs√£o de vendas, demanda de produtos, an√°lise financeira, previs√£o clim√°tica e muito mais, devido √† sua capacidade de gerar previs√µes precisas e √† sua facilidade de uso. 
            √â importante notar que, embora seja uma ferramenta poderosa, a escolha entre modelos depende do contexto espec√≠fico do problema e da natureza dos dados.</p>
        </div>
        <style>
            .custom-container p {
                text-align: justify; /* Alinha o texto √† justifica√ß√£o */
            }
        </style>
        """,
        "Utiliza√ß√£o do Prophet": """
        <div class="custom-container">
            <p>A biblioteca Prophet, desenvolvida pelo Facebook, √© uma ferramenta popular e poderosa para previs√£o de s√©ries temporais. Ela foi projetada para simplificar o processo de cria√ß√£o de modelos de previs√£o, oferecendo aos usu√°rios uma maneira f√°cil de gerar previs√µes precisas e de alta qualidade, mesmo sem um profundo conhecimento em s√©ries temporais ou estat√≠stica avan√ßada.</p>
            <p>Aqui est√£o alguns pontos-chave sobre o Prophet:</p>
            <ol>
                <li><strong>Facilidade de Uso:</strong> O Prophet foi desenvolvido para ser acess√≠vel e f√°cil de usar, permitindo que usu√°rios, mesmo sem experi√™ncia avan√ßada em s√©ries temporais, possam construir modelos de previs√£o.</li>
                <li><strong>Componentes Aditivos:</strong> O modelo do Prophet √© baseado em componentes aditivos, onde s√£o consideradas tend√™ncias anuais, sazonais e efeitos de feriados, al√©m de componentes de regress√£o.</li>
                <li><strong>Tratamento de Dados Ausentes e Outliers:</strong> O Prophet lida bem com dados ausentes e outliers, reduzindo a necessidade de pr√©-processamento extensivo dos dados antes da modelagem.</li>
                <li><strong>Flexibilidade:</strong> Permite a inclus√£o de dados adicionais, como feriados e eventos especiais, para melhorar a precis√£o das previs√µes.</li>
                <li><strong>Estimativa Autom√°tica de Intervalos de Incerteza:</strong> O Prophet fornece intervalos de incerteza para as previs√µes, o que √© essencial para compreender a confiabilidade dos resultados.</li>
                <li><strong>Implementa√ß√£o em Python e R:</strong> Est√° dispon√≠vel tanto para Python quanto para R, ampliando sua acessibilidade para diferentes comunidades de usu√°rios.</li>
                <li><strong>Comunidade Ativa e Documenta√ß√£o Detalhada:</strong> A biblioteca possui uma comunidade ativa de usu√°rios e desenvolvedores, al√©m de uma documenta√ß√£o detalhada e exemplos pr√°ticos que ajudam na aprendizagem e na solu√ß√£o de problemas.</li>
            </ol>
        </div>
        """,
        "Sobre o Autor": """
        <div class="custom-container">
            Criado por Henrique Jos√© Itzcovici.
            C√≥digo dispon√≠vel em: <a href="https://github.com/Henitz/challenge2" target="_blank">GitHub</a>
        </div>
        """
    }

    # Renderizar conte√∫do da guia selecionada
    st.markdown(tab_contents[selected_tab], unsafe_allow_html=True)

with col2:
    st.write("# Painel 2")
    # Adicione o conte√∫do do Painel 2 aqui

    """
    ### Passo 1: Importar dados
    """
    df = pd.DataFrame(columns=['Data'])  # Inicializa um DataFrame vazio

    # Adiciona o diret√≥rio que cont√©m app.py ao PATH para importa√ß√µes relativas
    # diretorio_app = os.path.dirname(os.path.abspath(__file__))
    # sys.path.append(diretorio_app)
    # from app import pasta_do_zip  # Importa a vari√°vel pasta_do_zip de app.py

    import streamlit as st

    # Defina a vari√°vel pasta_do_zip aqui
    import os

    pasta_do_zip = os.path.join("c:", "temp_extracted")
    # ou o caminho correto para a sua pasta

    # Original message in Portuguese formatted with HTML

    upload_message = (
        "Importe os dados da s√©rie em formato CSV aqui. Posteriormente, as colunas ser√£o nomeadas ds e y. "
        "A entrada de dados para o Prophet sempre deve ser com as colunas: ds e y. "
        "A coluna ds (datestamp) deve ter o formato esperado pelo Pandas, idealmente "
        "YYYY-MM-DD para data ou YYYY-MM-DD HH:MM:SS para timestamp. "
        "A coluna y deve ser num√©rica e representa a medida que queremos estimar."
    )

    # Use str() to convert the cache key to a string
    key_for_cache = str(os.path.basename(pasta_do_zip)) if os.path.exists(pasta_do_zip) else None

    # File Uploader
    uploaded_file = st.file_uploader(upload_message, type='csv', key=key_for_cache)

    if uploaded_file is not None:

        if not df.empty and 'Data' in df.columns and '√öltimo' in df.columns:
            # Renomear colunas para 'ds' e 'y'
            df = df.rename(columns={'Data': 'ds', '√öltimo': 'y'})
            df['ds'] = pd.to_datetime(df['ds'], format='%d.%m.%Y')

            # Outras opera√ß√µes no DataFrame, como remover colunas indesejadas
            colunas_para_remover = ['Abertura', 'M√°xima', 'M√≠nima', 'Vol.', 'Var%']
            df = df.drop(columns=colunas_para_remover)

            st.dataframe(df.style.set_table_attributes('style="height: 50px; overflow: auto;"'))

            if 'ds' in df.columns:
                data_padrao = df['ds'].min()
                hora_padrao = pd.Timestamp('00:00:00').time()  # Hora padr√£o como 00:00:00
                data_minima = df['ds'].min()  # Data m√≠nima do DataFrame
                data_maxima = df['ds'].max()  # Data m√°xima do DataFrame

                data_selecionada = st.sidebar.date_input("Selecione uma data", value=data_padrao, min_value=data_minima,
                                                         max_value=data_maxima)
                hora_selecionada = st.sidebar.time_input("Selecione um hor√°rio", value=hora_padrao)

                if data_selecionada:
                    # Convertendo a data selecionada para o formato do DataFrame
                    data_selecionada_formatada = pd.to_datetime(data_selecionada).strftime('%Y-%m-%d')

                    # Criar um datetime combinando a data selecionada com a hora padr√£o
                    data_hora_selecionada = pd.to_datetime(data_selecionada_formatada + ' ' + str(hora_selecionada))

                    # Filtrar o DataFrame com base na data e hora selecionadas
                    df_filtrado = df[df['ds'] == data_hora_selecionada]
                    st.dataframe(df_filtrado)
                    painel34.painel34(df, data_selecionada, hora_selecionada)

                else:
                    st.warning("N√£o h√° dados para a data selecionada.")
            else:
                st.warning("A coluna 'ds' n√£o est√° presente no DataFrame.")

        else:
            st.warning("O arquivo n√£o foi carregado corretamente ou n√£o possui as colunas esperadas.")
